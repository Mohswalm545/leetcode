from collections import deque

class Solution(object):
    def maxSlidingWindow(self, nums, k):
        if not nums or k <= 0:
            return []

        # Initialize a deque to store the indices of elements in the current window
        window = deque()
        result = []

        # Function to clean the deque from elements that are out of the current window
        def clean_deque(window, i):
            # Remove elements that are out of the current window
            while window and window[0] < i - k + 1:
                window.popleft()
            
            # Remove elements that are smaller than the current element
            while window and nums[window[-1]] < nums[i]:
                window.pop()

        # Iterate through the array
        for i in range(len(nums)):
            # Clean the deque to only contain elements in the current window
            clean_deque(window, i)

            # Add the current element to the deque
            window.append(i)

            # The first element in the deque is always the maximum for the current window
            if i >= k - 1:
                result.append(nums[window[0]])

        return result

# Test cases
nums1 = [1, 3, -1, -3, 5, 3, 6, 7]
k1 = 3
sol = Solution()
print(sol.maxSlidingWindow(nums1, k1))  # Output: [3, 3, 5, 5, 6, 7]

nums2 = [1]
k2 = 1
print(sol.maxSlidingWindow(nums2, k2))  # Output: [1]
